package com.common.util;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.BitmapFactory.Options;import android.media.ExifInterface;import android.net.Uri;import java.io.ByteArrayOutputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;public class BitmapTool {    public static byte[] bitmapByteFromUri(Uri uri) {        try {            Bitmap bitmap = BitmapFactory.decodeFile(uri.getPath());            byte[] bytes = BitmapTool.Bitmap2Bytes(bitmap);            return bytes;        } catch (Exception e) {        }        return null;    }    public static String readBitmapGPS(String file) {        String exif = "";        try {            ExifInterface exifInterface = new ExifInterface(file);            exif += GPSConverter.convertLat(exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE), exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF));            exif += "," + GPSConverter.convertLon(exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE), exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF));        } catch (IOException e) {        }        return exif;    }    public static boolean saveBitmap(Bitmap bitmap, String saveDir) {        try {            FileOutputStream fout = new FileOutputStream(saveDir);            bitmap.compress(Bitmap.CompressFormat.PNG, 75, fout);            fout.flush();            fout.close();            return true;        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    public static byte[] Bitmap2Bytes(Bitmap bm) {        if (bm == null)            return null;        ByteArrayOutputStream baos = new ByteArrayOutputStream();        try {            bm.compress(Bitmap.CompressFormat.JPEG, 50, baos);        } catch (Exception e) {            e.printStackTrace();            return null;        }        return baos.toByteArray();    }    public static Bitmap Bytes2Bimap(byte[] b) {        if (b.length != 0) {            Options options = new Options();            options.inPurgeable = true;            Bitmap bitmap = null;            bitmap = BitmapFactory.decodeByteArray(b, 0, b.length, options);            ByteArrayOutputStream baos = new ByteArrayOutputStream();            bitmap.compress(Bitmap.CompressFormat.JPEG, 50, baos);            byte[] data = baos.toByteArray();            bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);            data = null;            return bitmap;        }        return null;    }    public static Bitmap Drawable2Bimap(Context context, int resId) {        Options opts = new Options();        opts.inSampleSize = 2;        return BitmapFactory.decodeResource(context.getResources(), resId);    }//	public static Bitmap uri2Bitmap(Uri uri) {//		return lessenUriImage(getPath(uri));//	}//	public static String getPath(Uri uri) {//		String[] projection = { MediaStore.Images.Media.DATA };//		Cursor cursor = managedQuery(uri, projection, null, null, null);//		int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);//		cursor.moveToFirst();//		return cursor.getString(column_index);//	}    /**     * use to lessen pic 50%     *     * @param path sd card path     * @return bitmap     */    public final static Bitmap lessenUriImage(String path) {        Options options = new Options();        options.inJustDecodeBounds = true;        Bitmap bitmap = BitmapFactory.decodeFile(path, options); // 此时返回 bm 为空        options.inJustDecodeBounds = false; // 缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可        int be = (int) (options.outHeight / (float) 320);        if (be <= 0)            be = 1;        options.inSampleSize = be; // 重新读入图片，注意此时已经把 options.inJustDecodeBounds        // 设回 false 了        bitmap = BitmapFactory.decodeFile(path, options);        int w = bitmap.getWidth();        int h = bitmap.getHeight();        System.out.println(w + " " + h); // after zoom        return bitmap;    }    public static Bitmap getPicFromBytes(byte[] bytes, Options opts) {        if (bytes != null)            if (opts != null)                return BitmapFactory.decodeByteArray(bytes, 0, bytes.length, opts);            else                return BitmapFactory.decodeByteArray(bytes, 0, bytes.length);        return null;    }    public static byte[] readStream(InputStream inStream) throws Exception {        byte[] buffer = new byte[1024];        int len = -1;        ByteArrayOutputStream outStream = new ByteArrayOutputStream();        while ((len = inStream.read(buffer)) != -1) {            outStream.write(buffer, 0, len);        }        byte[] data = outStream.toByteArray();        outStream.close();        inStream.close();        return data;    }}